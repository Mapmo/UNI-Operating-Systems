В решението на задачата си използвам socket, който осъществява комуникация между server и client kakto и именуван семафор, за да контролирам достъпа на клиенти до сървъра.


Описание на процес сървър:
Както е казано в условието, първо валидирам, че е подаден само един аргумент. След това се опитвам да отворя този файл по начина, по който е описано в условието, като правя всички възможни валидации.

След това отварям сокет и го настройвам. После настройвам именувания семафор, като ако той вече е отворен го затварям и го отварям наново.

После влизам в безкраен цикъл (тъй като не е казано при какви условия процесът сървър умира). В този цикъл приемам един клиент като създавам канал между тях, после валидирам,че заявката на клиента за дадената поръчка е валидна, а ако не е - продължавам със следващия клиент.
Ако клиентът е дал валидни данни му изпращам съобщение със състоянието на сметката му. След това обработвам заявката му ако е възможно. После затварям отворения канал между двата процеса.

*забележка изпращам цяло текстово съобщение на клиента, за да не се извършва допълнителна обработка от самия него.

Еxit статуси:
0 - успех
1 - грешен брой аргументи
2 - проблем с настройване на сокет
3 - проблем с printf
4 - проблем с изпращане на данни към клиент
5 - проблем с получаване на данни от клиент
6 - проблем с отваряне на файл, писане, четене или търсене в него
7 - проблем със създаването на семафора


Описание на процес клиент:
Както е казано в условието, първо валидирам броя на подадени аргументи, като не правя валидация дали подаденият аргумент е валиден в контекста на задачата, защото оставям тази проверка на самия сървър понеже така ми изглежда по-реалистично. 

После настройвам сокета и семафора и пускам wait().

След като дойде реда на въпросния процес да продължи, той се свързва със сървъра. След това се извършват няколко операции за извличане на данните от там.

После се изпраща въпросната заявка на клиента към сървъра и обратно се получава сигнал 0 или 1 за успешност на операцията. 
Също така се освобождава заделената памет (включително семафора).

Еxit статуси:
0 - успех
1 - грешен брой аргументи
2 - проблем с настройване на сокет
3 - проблем с printf
4 - проблем с изпращане на данни от сървър
5 - проблем с получаване на данни от сървър
6 - неуспешна транзакция


Допълнителна забележка:

Промених дадения Makefile, защото ми се искаше допълнително линкване по време на компилация. Добавих -pthread към настройките за компилация на server и client. Също така промених Wpendantic на pedantic поради несъвместимост.


Източници: http://beej.us/guide/bgnet/html/multi/syscalls.html - този пример доста ми помогна да си настроя сървъра, защото man страницата ми беше по-скоро вредяща отколкото полезна

